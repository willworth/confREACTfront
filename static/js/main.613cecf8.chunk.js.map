{"version":3,"sources":["components/Header.js","components/Listing.js","components/ConferenceList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Listing","props","title","byline","location","href","url","ConferenceList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","conferences","_this2","fetch","then","json","data","map","conf","components_Listing","key","setState","console","log","App","components_Header","components_ConferenceList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAaeA,mLATX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,sDAJaE,mBCWNC,MAVf,SAAiBC,GACf,OACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,UAAMI,EAAMC,OACbP,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,UAAKI,EAAME,SACdR,EAAAC,EAAAC,cAAA,SAAII,EAAMG,UACVT,EAAAC,EAAAC,cAAA,KAAGQ,KAAMJ,EAAMK,KAAf,aC4CaC,cAhDb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAELc,MAAQ,CACXC,YAAa,IAJMR,oFASC,IAAAS,EAAAN,KAEpBO,MAAO,6DAENC,KAAK,SAAAH,GACF,OAAOA,EAAYI,SACpBD,KAAK,SAAAE,GACJ,IAAIL,EAAcK,EAAKL,YAAYM,IAAI,SAACC,GACpC,OACI5B,EAAAC,EAAAC,cAAC2B,EAAD,CACAC,IAAKF,EAAKrB,MACTA,MAAQqB,EAAKrB,MACZE,SAAWmB,EAAKnB,SACfE,IAAKiB,EAAKjB,IACVH,OAAQoB,EAAKpB,WAMxBc,EAAKS,SAAS,CAACV,YAAYA,IAC3BW,QAAQC,IAAI,QAASX,EAAKF,MAAMC,gDASlC,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEZa,KAAKI,MAAMC,oBA3CSjB,aCcd8B,mLAVX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,CAAgBjC,UAAU,mCALhBC,aCMEiC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCbNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.613cecf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Header\">\r\n        <p>  Frontend Developer Conferences </p>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nfunction Listing(props) {\r\n  return (\r\n  <div className=\"Listing\">\r\n  <h3 >{props.title}</h3>\r\n <p> <em>{props.byline}</em></p>\r\n  <p>{props.location}</p>\r\n  <a href={props.url}>Website</a>\r\n  </div>\r\n  )\r\n}\r\nexport default Listing;","import React, { Component } from 'react';\r\nimport Listing from \"./Listing\"\r\n\r\n\r\nclass ConferenceList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\nthis.state = {\r\n  conferences: []\r\n  // TODO: add shortlist array.  perhaps simpler as a bool?\r\n  }\r\n};\r\n\r\ncomponentWillMount () {\r\n  // fetch (\"http://localhost:8080/conferences\")\r\n  fetch (\"https://frontend-conferencesapi.herokuapp.com/conferences\")\r\n\r\n  .then(conferences =>{\r\n      return conferences.json(); \r\n  }).then(data => {\r\n      let conferences = data.conferences.map((conf) =>{\r\n          return(\r\n              <Listing \r\n              key={conf.title}\r\n               title= {conf.title}\r\n                location= {conf.location}\r\n                 url={conf.url}\r\n                 byline={conf.byline} />\r\n             \r\n              \r\n              )\r\n          \r\n      })\r\n      this.setState({conferences:conferences});\r\n      console.log('state', this.state.conferences);\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ConferenceList\">\r\n        {/* <p>This is the ConferenceList Component</p> */}\r\n        {this.state.conferences}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConferenceList;","import React, { Component } from 'react';\r\nimport Header from '../src/components/Header';\r\nimport './App.css';\r\nimport ConferenceList from \"../src/components/ConferenceList\"\r\n// import Shortlist from \"./components/Shortlist\"\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App \">\r\n        <Header/>\r\n        <ConferenceList className=\"ConferenceList wrapper\"/>\r\n        {/* <Shortlist/> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}